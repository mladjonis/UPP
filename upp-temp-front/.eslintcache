[{"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\Home\\Home.js":"1","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\index.js":"2","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\registration\\Registration.js":"3","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\formReducer.js":"4","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js":"5","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\types.js":"6","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\index.js":"7","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\App.js":"8","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\index.js":"9","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\login\\Login.js":"10","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js":"11","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUpload.js":"12","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\navbar\\Navbar.js":"13","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\email-confirmation\\EmailConfirmation.js":"14","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFieldsReader.js":"15","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\genres.js":"16","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\registration.js":"17","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\file.js":"18","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\cometee\\DecisionsDetails.js":"19","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\cometee.js":"20","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\token.js":"21","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\history.js":"22","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js":"23","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js":"24"},{"size":564,"mtime":1609212291031,"results":"25","hashOfConfig":"26"},{"size":1036,"mtime":1609290124580,"results":"27","hashOfConfig":"26"},{"size":913,"mtime":1609701659771,"results":"28","hashOfConfig":"26"},{"size":1338,"mtime":1610141877382,"results":"29","hashOfConfig":"26"},{"size":16026,"mtime":1610209529054,"results":"30","hashOfConfig":"26"},{"size":669,"mtime":1609901741520,"results":"31","hashOfConfig":"26"},{"size":5208,"mtime":1611343380572,"results":"32","hashOfConfig":"26"},{"size":1244,"mtime":1611181649188,"results":"33","hashOfConfig":"26"},{"size":218,"mtime":1608175501239,"results":"34","hashOfConfig":"26"},{"size":2304,"mtime":1609808216589,"results":"35","hashOfConfig":"26"},{"size":306,"mtime":1608216381067,"results":"36","hashOfConfig":"26"},{"size":1238,"mtime":1610237945723,"results":"37","hashOfConfig":"26"},{"size":2631,"mtime":1610733484904,"results":"38","hashOfConfig":"26"},{"size":1629,"mtime":1610210216401,"results":"39","hashOfConfig":"26"},{"size":18548,"mtime":1611343164998,"results":"40","hashOfConfig":"26"},{"size":126,"mtime":1608175502506,"results":"41","hashOfConfig":"26"},{"size":361,"mtime":1610710656252,"results":"42","hashOfConfig":"26"},{"size":310,"mtime":1609259154242,"results":"43","hashOfConfig":"26"},{"size":18230,"mtime":1610236379135,"results":"44","hashOfConfig":"26"},{"size":319,"mtime":1609905562783,"results":"45","hashOfConfig":"26"},{"size":893,"mtime":1610833707570,"results":"46","hashOfConfig":"26"},{"size":99,"mtime":1609290080298,"results":"47","hashOfConfig":"26"},{"size":204,"mtime":1610710656262,"results":"48","hashOfConfig":"26"},{"size":1249,"mtime":1611181598284,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1cxe0rw",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\Home\\Home.js",[],["106","107"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\index.js",[],["108","109"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\registration\\Registration.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\formReducer.js",["110"],"import {\r\n  FETCH_FORM_DATA_SUCCESS,\r\n  FETCH_FORM_DATA_ERROR,\r\n  FETCH_FORM_DATA,\r\n  SUBMIT_FORM_DATA,\r\n  START_PROCESS,\r\n  EMAIL_SUBMIT,\r\n  LOGIN,\r\n  DOC_UPLOAD,\r\n  SUBMIT_COMETEE_FORM_DATA,\r\n  GET_COMETEE_USERS,\r\n} from \"../actions/types\";\r\n\r\nconst initState = {\r\n  formData: null,\r\n  error: null,\r\n  registrationResponse: null,\r\n  processInstanceId: null,\r\n  emailConfirmation: null,\r\n  cometeeRespone: null,\r\n  auth: null,\r\n  cometeeUsers: null,\r\n};\r\n\r\nconst formReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_FORM_DATA:\r\n      return { ...state, formData: action.payload };\r\n    case FETCH_FORM_DATA_ERROR:\r\n      return { ...state, error: action.error };\r\n    case SUBMIT_FORM_DATA:\r\n      return { ...state, registrationResponse: action.payload };\r\n    case SUBMIT_COMETEE_FORM_DATA:\r\n      return { ...state, cometeeRespone: action.payload };\r\n    case START_PROCESS:\r\n      return { ...state, processInstanceId: action.payload };\r\n    case EMAIL_SUBMIT:\r\n      return { ...state, emailConfirmation: action.payload };\r\n    case GET_COMETEE_USERS:\r\n      return { ...state, cometeeUsers: action.payload };\r\n    case LOGIN:\r\n      return { ...state, auth: action.payload };\r\n    case DOC_UPLOAD:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default formReducer;\r\n",["111","112"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js",["113","114"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchFormData,\r\n  submitWriterForm,\r\n  startWriterProcess,\r\n} from \"../../actions\";\r\nimport { history } from \"../../history\";\r\n\r\nconst formData = {\r\n  processDefinitionId:\r\n    \"Process_Probe_12:2:c1caa886-3cc5-11eb-92f4-e4f89c5bfdff\",\r\n  // processInstanceId: //TO NAM TREBA IZVUCI TO IZ APIJA\r\n  processDefinitionKey: \"Process_Probe_12\",\r\n  taskId: \"registration_task\",\r\n  taskName: \"Registration\",\r\n  formKey: \"form_key\",\r\n  camundaFormFields: [\r\n    {\r\n      formId: \"username\",\r\n      label: \"Username\",\r\n      type: \"string\",\r\n      defaultValue: \"Akcija,Komedija,Biografija\",\r\n      values: [\r\n        {\r\n          id: \"odluka1\",\r\n          name: \"prodji\",\r\n        },\r\n        {\r\n          id: \"odluka2\",\r\n          name: \"jos materijala\",\r\n        },\r\n      ],\r\n      validators: [\r\n        {\r\n          validatorName: \"required\",\r\n          validatorConfig: \"none\",\r\n        },\r\n        // {\r\n        //   validatorName: \"minlength\",\r\n        //   validatorConfig: \"6\",\r\n        // },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nclass FormFields extends React.Component {\r\n  state = {\r\n    zanrovi: formData,\r\n    genreRequirement: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    console.log(this.props);\r\n    await this.props.startWriterProcess();\r\n    await this.props.fetchFormData(this.props.processInstanceId);\r\n  }\r\n\r\n  // populateFormSendingList = (formListData) => {\r\n  //   let list = [];\r\n  //   let genresList = [];\r\n  //   formListData.forEach((value, key) => {\r\n  //     if (key == \"genres\") {\r\n  //       genresList.push(value);\r\n  //     } else {\r\n  //       list.push({ FieldId: key, FieldValue: value });\r\n  //     }\r\n  //   });\r\n  //   //spoji sve vrednosti pod kljucem genres iz niza genresList da bude string zbog modela u camundi\r\n  //   if (genresList.length > 0) {\r\n  //     let l2 = [{ FieldId: \"genres\", FieldValue: genresList.join(\",\") }];\r\n  //     this.setState({\r\n  //       ...this.state,\r\n  //       checkboxCondition: true,\r\n  //     });\r\n  //     return [...list, ...l2];\r\n  //   } else {\r\n  //     this.setState({ ...this.state, checkboxCondition: false });\r\n  //     return list;\r\n  //   }\r\n  // };\r\n\r\n  populateFormSendingList = async (formListData) => {\r\n    let sendingList = [];\r\n    let genresList = [];\r\n    let cometeeList = [];\r\n    formListData.forEach((value, key) => {\r\n      if (key === \"Genres\") {\r\n        genresList.push(value);\r\n      } else if (key === \"Odluka\") {\r\n        cometeeList.push(value);\r\n      } else {\r\n        sendingList.push({ FieldId: key, FieldValue: value });\r\n      }\r\n    });\r\n    console.log(genresList);\r\n    console.log(cometeeList);\r\n    if (genresList.length > 0) {\r\n      let l2 = [{ FieldId: \"genres\", FieldValue: genresList.join(\",\") }];\r\n      await this.setStateAsync({ genreRequirement: true });\r\n      console.log(this.state);\r\n      return [...sendingList, ...l2];\r\n    } else if (cometeeList.length > 0) {\r\n      let l3 = [{ FieldId: \"odluka\", FieldValue: genresList }];\r\n    } else {\r\n      await this.setStateAsync({ genreRequirement: false });\r\n      return [...sendingList];\r\n    }\r\n  };\r\n\r\n  setStateAsync = (state) => {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve);\r\n    });\r\n  };\r\n\r\n  onFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    const data = new FormData(event.target);\r\n    const listData = await this.populateFormSendingList(data);\r\n    //format je recimo input-value pa onda input-name\r\n    console.log(this.state);\r\n\r\n    if (this.state.genreRequirement === false) return;\r\n    console.log(listData);\r\n    await this.props.submitWriterForm(\r\n      listData,\r\n      this.props.formData.taskId,\r\n      this.props.formData.processInstanceId,\r\n      this.props.formData.processDefinitionId\r\n    );\r\n    history.push(\"/email-confirmation\");\r\n  };\r\n\r\n  render() {\r\n    const { formData, registrationResponse } = this.props;\r\n    console.log(this.props);\r\n    return (\r\n      <div style={{ margin: \"30px 400px\", backgroundColor: \"khaki\" }}>\r\n        <h3 style={{ margin: \"3px 40px\" }}>Registracija pisca</h3>\r\n        <form onSubmit={this.onFormSubmit}>\r\n          {formData &&\r\n            formData.camundaFormFields.map((field) => {\r\n              return (\r\n                <React.Fragment>\r\n                  {field.type === \"long\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        id={field.formId}\r\n                        name={field.formId}\r\n                        type=\"numeric\"\r\n                        min={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"min\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"min\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        max={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"max\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"max\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        readOnly={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"readonly\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  {field.type === \"string\" && field.formId === \"genres\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        multiple={true}\r\n                        id={field.formId}\r\n                        name={field.label}\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      >\r\n                        {field.defaultValue.split(\",\").map((val) => {\r\n                          return (\r\n                            <option key={val} value={val}>\r\n                              {val}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                  ) : null}\r\n                  {field.type === \"string\" &&\r\n                  field.formId !== \"genres\" &&\r\n                  field.formId === \"password\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        id={field.formId}\r\n                        name={field.formId}\r\n                        type=\"password\"\r\n                        minLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"minlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"minlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        maxLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"maxlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"maxlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        readOnly={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"readonly\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  {field.type === \"string\" &&\r\n                  field.formId !== \"genres\" &&\r\n                  field.formId !== \"password\" &&\r\n                  field.formId !== \"email\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        id={field.formId}\r\n                        name={field.formId}\r\n                        type=\"text\"\r\n                        minLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"minlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"minlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        maxLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"maxlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"maxlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        readOnly={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"readonly\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  {field.type === \"string\" &&\r\n                  field.formId !== \"genres\" &&\r\n                  field.formId !== \"password\" &&\r\n                  field.formId === \"email\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        id={field.formId}\r\n                        name={field.formId}\r\n                        type=\"email\"\r\n                        minLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"minlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"minlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        maxLength={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"maxlength\"\r\n                          )\r\n                            ? field.validators[\r\n                                field.validators.findIndex(\r\n                                  (z) => z.validatorName === \"maxlength\"\r\n                                )\r\n                              ].validatorConfig\r\n                            : null\r\n                        }\r\n                        readOnly={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"readonly\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  {field.type === \"enum\" ? (\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor={field.formId}> {field.label}</label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        id={field.formId}\r\n                        name={field.label}\r\n                        required={\r\n                          field.validators.find(\r\n                            (z) => z.validatorName === \"required\"\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      >\r\n                        {field.values.map((val) => {\r\n                          return (\r\n                            <option key={val.id} value={val.name}>\r\n                              {val.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                  ) : null}\r\n                  {/*proveri da li ima greske  */}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  return {\r\n    formData: state.form.formData,\r\n    registrationResponse: state.form.registrationResponse,\r\n    processInstanceId: state.form.processInstanceId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchFormData: (processInstanceId) =>\r\n      dispatch(fetchFormData(processInstanceId)),\r\n    submitWriterForm: (formListData, taskId, procInstanceId) =>\r\n      dispatch(submitWriterForm(formListData, taskId, procInstanceId)),\r\n    startWriterProcess: () => dispatch(startWriterProcess()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormFields);\r\n","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\types.js",[],["115","116"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\index.js",["117","118","119","120","121"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\App.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\index.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\login\\Login.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUpload.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\navbar\\Navbar.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\email-confirmation\\EmailConfirmation.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFieldsReader.js",["122","123","124"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\genres.js",[],["125","126"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\registration.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\file.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\cometee\\DecisionsDetails.js",["127","128"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchFormData,\r\n  fetchFormDataCometee,\r\n  submitCometeeForm,\r\n  getCometeeUsers,\r\n} from \"../../actions\";\r\n\r\nconst formData = {\r\n  processInstanceId: \"aade0973-4fcd-11eb-9997-e4f89c5bfdff\",\r\n  processDefinitionKey: \"Process_0abkzqf\",\r\n  taskId: \"Activity_0yqye3f\",\r\n  taskName: \"asa\",\r\n  formKey: null,\r\n  camundaFormFields: [\r\n    {\r\n      formId: \"komentar\",\r\n      label: \"Komentar\",\r\n      type: \"string\",\r\n      defaultValue: null,\r\n      validators: [\r\n        {\r\n          validatorName: \"required\",\r\n          validatorConfig: null,\r\n        },\r\n      ],\r\n      values: [],\r\n    },\r\n    {\r\n      formId: \"odluka\",\r\n      label: \"Odluka\",\r\n      type: \"enum\",\r\n      defaultValue: null,\r\n      validators: [],\r\n      values: [\r\n        {\r\n          id: \"odluka1\",\r\n          label: null,\r\n          name: \"111111\",\r\n        },\r\n        {\r\n          id: \"odluka2\",\r\n          label: null,\r\n          name: \"222222\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nclass DecisionsDetails extends React.Component {\r\n  state = {\r\n    odlukaRequirement: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.getCometeeUsers();\r\n    await this.props.fetchFormDataCometee(\r\n      this.props.processInstanceId.processInstanceId,\r\n      \"Commetee meeting\"\r\n    );\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    await this.props.getCometeeUsers();\r\n  }\r\n\r\n  populateFormSendingList = async (formListData) => {\r\n    let sendingList = [];\r\n    let cometeeList = [];\r\n    formListData.forEach((value, key) => {\r\n      if (key === \"Odluka\") {\r\n        cometeeList.push(value);\r\n      } else {\r\n        sendingList.push({ FieldId: key, FieldValue: value });\r\n      }\r\n    });\r\n\r\n    if (cometeeList.length > 0) {\r\n      let l3 = [{ FieldId: \"odluka\", FieldValue: cometeeList[0] }];\r\n      await this.setStateAsync({ odlukaRequirement: true });\r\n      return [...sendingList, ...l3];\r\n    } else {\r\n      await this.setStateAsync({ odlukaRequirement: false });\r\n      return [...sendingList];\r\n    }\r\n  };\r\n\r\n  setStateAsync = (state) => {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve);\r\n    });\r\n  };\r\n\r\n  onFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    const data = new FormData(event.target);\r\n    const listData = await this.populateFormSendingList(data);\r\n    //format je recimo input-value pa onda input-name\r\n    console.log(this.state);\r\n\r\n    if (this.state.odluka === false) return;\r\n    console.log(listData);\r\n    this.props.submitCometeeForm(\r\n      listData,\r\n      // formData.taskId,\r\n      // formData.processInstanceId,\r\n      // formData.processDefinitionKey\r\n      this.props.formData.taskId,\r\n      this.props.formData.processInstanceId,\r\n      this.props.formData.processDefinitionId\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { formData, cometeeUsers } = this.props;\r\n    console.log(this.props);\r\n    return (\r\n      <div style={{ backgroundColor: \"khaki\" }}>\r\n        <h3 style={{ margin: \"3px 40px\" }}>Validacija korisnika</h3>\r\n        {cometeeUsers &&\r\n          cometeeUsers.users.map((user) => {\r\n            return (\r\n              <>\r\n                <div>{user.email}</div>\r\n                {user.files &&\r\n                  user.files.split(\",\").map((link) => {\r\n                    return <a href={link}>Preview</a>;\r\n                  })}\r\n                <form onSubmit={this.onFormSubmit}>\r\n                  {formData &&\r\n                    formData.camundaFormFields.map((field) => {\r\n                      return (\r\n                        <React.Fragment>\r\n                          {field.type === \"long\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"numeric\"\r\n                                min={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"min\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"min\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                max={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"max\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"max\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId === \"genres\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                multiple={true}\r\n                                id={field.formId}\r\n                                name={field.label}\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {field.defaultValue.split(\",\").map((val) => {\r\n                                  return (\r\n                                    <option key={val} value={val}>\r\n                                      {val}\r\n                                    </option>\r\n                                  );\r\n                                })}\r\n                              </select>\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId === \"password\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"password\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId !== \"password\" &&\r\n                          field.formId !== \"email\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"text\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId !== \"password\" &&\r\n                          field.formId === \"email\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"email\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"enum\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.label}\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {field.values.map((val) => {\r\n                                  return (\r\n                                    <option key={val.id} value={val.id}>\r\n                                      {val.name}\r\n                                    </option>\r\n                                  );\r\n                                })}\r\n                              </select>\r\n                            </div>\r\n                          ) : null}\r\n                          {/*proveri da li ima greske  */}\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              </>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  return {\r\n    formData: state.form.formData,\r\n    processInstanceId: state.form.cometeeUsers,\r\n    cometeeUsers: state.form.cometeeUsers,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchFormData: (processInstanceId) =>\r\n      dispatch(fetchFormData(processInstanceId)),\r\n    fetchFormDataCometee: (processInstanceId, taskNameOrId) =>\r\n      dispatch(fetchFormDataCometee(processInstanceId, taskNameOrId)),\r\n    submitCometeeForm: (formListData, taskId, procInstanceId) =>\r\n      dispatch(submitCometeeForm(formListData, taskId, procInstanceId)),\r\n    getCometeeUsers: () => dispatch(getCometeeUsers()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecisionsDetails);\r\n","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\cometee.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\token.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\history.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":3,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"129","replacedBy":"139"},{"ruleId":"131","replacedBy":"140"},{"ruleId":"135","severity":1,"message":"141","line":105,"column":11,"nodeType":"137","messageId":"138","endLine":105,"endColumn":13},{"ruleId":"135","severity":1,"message":"142","line":138,"column":23,"nodeType":"137","messageId":"138","endLine":138,"endColumn":43},{"ruleId":"129","replacedBy":"143"},{"ruleId":"131","replacedBy":"144"},{"ruleId":"135","severity":1,"message":"145","line":2,"column":3,"nodeType":"137","messageId":"138","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"146","line":3,"column":3,"nodeType":"137","messageId":"138","endLine":3,"endColumn":18},{"ruleId":"135","severity":1,"message":"136","line":4,"column":3,"nodeType":"137","messageId":"138","endLine":4,"endColumn":26},{"ruleId":"135","severity":1,"message":"147","line":5,"column":3,"nodeType":"137","messageId":"138","endLine":5,"endColumn":24},{"ruleId":"135","severity":1,"message":"148","line":20,"column":8,"nodeType":"137","messageId":"138","endLine":20,"endColumn":17},{"ruleId":"135","severity":1,"message":"141","line":45,"column":11,"nodeType":"137","messageId":"138","endLine":45,"endColumn":13},{"ruleId":"135","severity":1,"message":"142","line":89,"column":23,"nodeType":"137","messageId":"138","endLine":89,"endColumn":43},{"ruleId":"135","severity":1,"message":"149","line":89,"column":45,"nodeType":"137","messageId":"138","endLine":89,"endColumn":49},{"ruleId":"129","replacedBy":"150"},{"ruleId":"131","replacedBy":"151"},{"ruleId":"135","severity":1,"message":"152","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":14},{"ruleId":"135","severity":1,"message":"153","line":11,"column":7,"nodeType":"137","messageId":"138","endLine":11,"endColumn":15},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],["154"],["155"],"no-unused-vars","'FETCH_FORM_DATA_SUCCESS' is defined but never used.","Identifier","unusedVar",["154"],["155"],"'l3' is assigned a value but never used.","'registrationResponse' is assigned a value but never used.",["154"],["155"],"'SIGN_UP_ERROR' is defined but never used.","'SIGN_UP_SUCCESS' is defined but never used.","'FETCH_FORM_DATA_ERROR' is defined but never used.","'jwtDecode' is defined but never used.","'beta' is assigned a value but never used.",["154"],["155"],"'Link' is defined but never used.","'formData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]