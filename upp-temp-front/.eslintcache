[{"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\Home\\Home.js":"1","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\index.js":"2","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\registration\\Registration.js":"3","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\formReducer.js":"4","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js":"5","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\types.js":"6","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\index.js":"7","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\App.js":"8","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\index.js":"9","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\login\\Login.js":"10","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js":"11","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUpload.js":"12","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\navbar\\Navbar.js":"13","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\email-confirmation\\EmailConfirmation.js":"14","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFieldsReader.js":"15","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\genres.js":"16","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\registration.js":"17","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\file.js":"18","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\cometee\\DecisionsDetails.js":"19","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\cometee.js":"20","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\token.js":"21","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\history.js":"22","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js":"23","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js":"24","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\App.js":"25","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js":"26","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js":"27","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js":"28","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\apis\\file.js":"29","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\apis\\payment.js":"30","C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js":"31"},{"size":564,"mtime":1609212291031,"results":"32","hashOfConfig":"33"},{"size":1036,"mtime":1609290124580,"results":"34","hashOfConfig":"33"},{"size":913,"mtime":1609701659771,"results":"35","hashOfConfig":"33"},{"size":1460,"mtime":1611882922852,"results":"36","hashOfConfig":"33"},{"size":15897,"mtime":1612292385348,"results":"37","hashOfConfig":"33"},{"size":730,"mtime":1611882922834,"results":"38","hashOfConfig":"33"},{"size":5208,"mtime":1611882922831,"results":"39","hashOfConfig":"33"},{"size":1275,"mtime":1611882922828,"results":"40","hashOfConfig":"33"},{"size":218,"mtime":1608175501239,"results":"41","hashOfConfig":"33"},{"size":2304,"mtime":1609808216589,"results":"42","hashOfConfig":"33"},{"size":306,"mtime":1608216381067,"results":"43","hashOfConfig":"33"},{"size":1529,"mtime":1612239695934,"results":"44","hashOfConfig":"33"},{"size":2631,"mtime":1611882922849,"results":"45","hashOfConfig":"33"},{"size":1629,"mtime":1610210216401,"results":"46","hashOfConfig":"33"},{"size":19436,"mtime":1612299260997,"results":"47","hashOfConfig":"33"},{"size":126,"mtime":1608175502506,"results":"48","hashOfConfig":"33"},{"size":361,"mtime":1610710656252,"results":"49","hashOfConfig":"33"},{"size":310,"mtime":1609259154242,"results":"50","hashOfConfig":"33"},{"size":18230,"mtime":1611882865879,"results":"51","hashOfConfig":"33"},{"size":319,"mtime":1609905562783,"results":"52","hashOfConfig":"33"},{"size":893,"mtime":1611882922856,"results":"53","hashOfConfig":"33"},{"size":99,"mtime":1609290080298,"results":"54","hashOfConfig":"33"},{"size":204,"mtime":1610710656262,"results":"55","hashOfConfig":"33"},{"size":1249,"mtime":1611882922840,"results":"56","hashOfConfig":"33"},{"size":1275,"mtime":1612478577095,"results":"57","hashOfConfig":"58"},{"size":1249,"mtime":1612478577077,"results":"59","hashOfConfig":"58"},{"size":306,"mtime":1612478577014,"results":"60","hashOfConfig":"58"},{"size":15897,"mtime":1612478577056,"results":"61","hashOfConfig":"58"},{"size":310,"mtime":1612478577105,"results":"62","hashOfConfig":"58"},{"size":319,"mtime":1612485941502,"results":"63","hashOfConfig":"58"},{"size":13049,"mtime":1612485544283,"results":"64","hashOfConfig":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1cxe0rw",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"67"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xicyhy",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\Home\\Home.js",[],["134","135"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\index.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\registration\\Registration.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\formReducer.js",["136"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js",["137","138"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\types.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\actions\\index.js",["139","140","141","142","143"],"import {\r\n  SIGN_UP_ERROR,\r\n  SIGN_UP_SUCCESS,\r\n  FETCH_FORM_DATA_SUCCESS,\r\n  FETCH_FORM_DATA_ERROR,\r\n  FETCH_FORM_DATA,\r\n  SUBMIT_FORM_DATA,\r\n  GET_ALL_GENRES,\r\n  START_PROCESS,\r\n  LOGIN,\r\n  EMAIL_SUBMIT,\r\n  DOC_UPLOAD,\r\n  GET_COMETEE_USERS,\r\n  FETCH_BETA_FORM_DATA,\r\n} from \"./types\";\r\nimport { registrationApi } from \"../apis/registration\";\r\nimport { genresApi } from \"../apis/genres\";\r\nimport { fileApi } from \"../apis/file\";\r\nimport { cometeeApi } from \"../apis/cometee\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { history } from \"../history\";\r\n\r\n//fetch form data\r\nexport const fetchFormData = (processInstanceId) => async (dispatch) => {\r\n  const response = await registrationApi.get(\"/GetFormData\", {\r\n    params: {\r\n      ProcessId: processInstanceId,\r\n    },\r\n  });\r\n  console.log(response);\r\n  dispatch({ type: FETCH_FORM_DATA, payload: response.data });\r\n};\r\n\r\nexport const submitWriterForm = (\r\n  formListData,\r\n  taskId,\r\n  procInstanceId\r\n) => async (dispatch) => {\r\n  const response = await registrationApi.post(\"/RegisterUser\", {\r\n    SubmitFields: formListData,\r\n    TaskId: taskId,\r\n    ProcessInstanceId: procInstanceId,\r\n  });\r\n  console.log(response);\r\n  dispatch({ type: SUBMIT_FORM_DATA, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const submitReaderForm = (\r\n  formListData,\r\n  taskId,\r\n  procInstanceId\r\n) => async (dispatch) => {\r\n  const response = await registrationApi.post(\"/RegisterUser\", {\r\n    SubmitFields: formListData,\r\n    TaskId: taskId,\r\n    ProcessInstanceId: procInstanceId,\r\n  });\r\n  console.log(response);\r\n  dispatch({ type: SUBMIT_FORM_DATA, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const getGenres = () => async (dispatch) => {\r\n  const response = await genresApi.get(\"/GetAll\");\r\n\r\n  dispatch({ type: GET_ALL_GENRES, payload: response.data });\r\n};\r\n\r\nexport const startWriterProcess = () => async (dispatch) => {\r\n  const response = await registrationApi.get(\"/StartWriterProcess\");\r\n  dispatch({ type: START_PROCESS, payload: response.data });\r\n};\r\n\r\nexport const startReaderProcess = () => async (dispatch) => {\r\n  const response = await registrationApi.get(\"/StartReaderProcess\");\r\n  dispatch({ type: START_PROCESS, payload: response.data });\r\n};\r\n\r\nexport const emailSubmit = (userId, token, processInstanceId) => async (\r\n  dispatch\r\n) => {\r\n  console.log(userId, token, processInstanceId);\r\n  const response = await registrationApi.get(\"/EmailConfirmation\", {\r\n    params: {\r\n      userId: userId,\r\n      token: token,\r\n      processInstanceId: processInstanceId,\r\n    },\r\n  });\r\n  console.log(response);\r\n  dispatch({ type: EMAIL_SUBMIT, payload: response.data });\r\n};\r\n\r\nexport const login = (loginDto) => async (dispatch) => {\r\n  const response = await registrationApi.post(\"/Login\", loginDto);\r\n\r\n  console.log(response.data);\r\n  console.log(response.data.token);\r\n\r\n  if (response.data) {\r\n    localStorage.setItem(\"token\", response.data.token);\r\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n  }\r\n  dispatch({ type: LOGIN, payload: response.data });\r\n  if (response.data.user.userRoles.find((x) => x.role.name === \"Writer\")) {\r\n    history.push(\"/upload\");\r\n  } else {\r\n    history.push(\"/\");\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch) => {\r\n  console.log(\"usao u logout\");\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"user\");\r\n  history.push(\"/\");\r\n  await registrationApi.post(\"/Logout\");\r\n};\r\n\r\nexport const uploadDocuments = (documents, procId) => async (dispatch) => {\r\n  let formData = new FormData();\r\n  for (let i = 0; i < documents.length; i++) {\r\n    const file = documents[i];\r\n    formData.append(\"FormFiles\", file);\r\n  }\r\n  formData.append(\"ProcessInstanceId\", procId);\r\n  await fileApi.post(\"/UploadDocuments\", formData);\r\n  dispatch({ type: DOC_UPLOAD });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const submitCometeeForm = (\r\n  formListData,\r\n  taskId,\r\n  procInstanceId\r\n) => async (dispatch) => {\r\n  const response = await cometeeApi.post(\"/SubmitCometeeForm\", {\r\n    SubmitFields: formListData,\r\n    TaskId: taskId,\r\n    ProcessInstanceId: procInstanceId,\r\n  });\r\n  dispatch({ type: SUBMIT_FORM_DATA, payload: response.data });\r\n};\r\n\r\nexport const getCometeeUsers = () => async (dispatch) => {\r\n  const response = await cometeeApi.get(\"/GetUsersToApprove\");\r\n  dispatch({ type: GET_COMETEE_USERS, payload: response.data });\r\n};\r\n\r\nexport const fetchFormDataCometee = (procId, taskNameOrId) => async (\r\n  dispatch\r\n) => {\r\n  const response = await cometeeApi.get(\"/GetFormData\", {\r\n    params: {\r\n      ProcessInstanceId: procId,\r\n      TaskNameOrId: taskNameOrId,\r\n    },\r\n  });\r\n  dispatch({ type: FETCH_BETA_FORM_DATA, payload: response.data });\r\n};\r\n\r\nexport const fetchBetaReadersFormData = (procId, taskNameOrId) => async (\r\n  dispatch\r\n) => {\r\n  const response = await registrationApi.get(\"/GetGenresFormData\", {\r\n    params: {\r\n      ProcessInstanceId: procId,\r\n      TaskNameOrId: taskNameOrId,\r\n    },\r\n  });\r\n  dispatch({ type: FETCH_BETA_FORM_DATA, payload: response.data });\r\n};\r\n\r\nexport const dummy = () => async (dispatch) => {\r\n  const response = await registrationApi.get(\"/dummy\");\r\n  console.log(response);\r\n};\r\n","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\App.js",[],["144","145"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\index.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\login\\Login.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUpload.js",["146"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\navbar\\Navbar.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\email-confirmation\\EmailConfirmation.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFieldsReader.js",["147","148","149"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\genres.js",[],["150","151"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\registration.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\file.js",[],["152","153"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\cometee\\DecisionsDetails.js",["154","155"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchFormData,\r\n  fetchFormDataCometee,\r\n  submitCometeeForm,\r\n  getCometeeUsers,\r\n} from \"../../actions\";\r\n\r\nconst formData = {\r\n  processInstanceId: \"aade0973-4fcd-11eb-9997-e4f89c5bfdff\",\r\n  processDefinitionKey: \"Process_0abkzqf\",\r\n  taskId: \"Activity_0yqye3f\",\r\n  taskName: \"asa\",\r\n  formKey: null,\r\n  camundaFormFields: [\r\n    {\r\n      formId: \"komentar\",\r\n      label: \"Komentar\",\r\n      type: \"string\",\r\n      defaultValue: null,\r\n      validators: [\r\n        {\r\n          validatorName: \"required\",\r\n          validatorConfig: null,\r\n        },\r\n      ],\r\n      values: [],\r\n    },\r\n    {\r\n      formId: \"odluka\",\r\n      label: \"Odluka\",\r\n      type: \"enum\",\r\n      defaultValue: null,\r\n      validators: [],\r\n      values: [\r\n        {\r\n          id: \"odluka1\",\r\n          label: null,\r\n          name: \"111111\",\r\n        },\r\n        {\r\n          id: \"odluka2\",\r\n          label: null,\r\n          name: \"222222\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nclass DecisionsDetails extends React.Component {\r\n  state = {\r\n    odlukaRequirement: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.props.getCometeeUsers();\r\n    await this.props.fetchFormDataCometee(\r\n      this.props.processInstanceId.processInstanceId,\r\n      \"Commetee meeting\"\r\n    );\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    await this.props.getCometeeUsers();\r\n  }\r\n\r\n  populateFormSendingList = async (formListData) => {\r\n    let sendingList = [];\r\n    let cometeeList = [];\r\n    formListData.forEach((value, key) => {\r\n      if (key === \"Odluka\") {\r\n        cometeeList.push(value);\r\n      } else {\r\n        sendingList.push({ FieldId: key, FieldValue: value });\r\n      }\r\n    });\r\n\r\n    if (cometeeList.length > 0) {\r\n      let l3 = [{ FieldId: \"odluka\", FieldValue: cometeeList[0] }];\r\n      await this.setStateAsync({ odlukaRequirement: true });\r\n      return [...sendingList, ...l3];\r\n    } else {\r\n      await this.setStateAsync({ odlukaRequirement: false });\r\n      return [...sendingList];\r\n    }\r\n  };\r\n\r\n  setStateAsync = (state) => {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve);\r\n    });\r\n  };\r\n\r\n  onFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    const data = new FormData(event.target);\r\n    const listData = await this.populateFormSendingList(data);\r\n    //format je recimo input-value pa onda input-name\r\n    console.log(this.state);\r\n\r\n    if (this.state.odluka === false) return;\r\n    console.log(listData);\r\n    this.props.submitCometeeForm(\r\n      listData,\r\n      // formData.taskId,\r\n      // formData.processInstanceId,\r\n      // formData.processDefinitionKey\r\n      this.props.formData.taskId,\r\n      this.props.formData.processInstanceId,\r\n      this.props.formData.processDefinitionId\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { formData, cometeeUsers } = this.props;\r\n    console.log(this.props);\r\n    return (\r\n      <div style={{ backgroundColor: \"khaki\" }}>\r\n        <h3 style={{ margin: \"3px 40px\" }}>Validacija korisnika</h3>\r\n        {cometeeUsers &&\r\n          cometeeUsers.users.map((user) => {\r\n            return (\r\n              <>\r\n                <div>{user.email}</div>\r\n                {user.files &&\r\n                  user.files.split(\",\").map((link) => {\r\n                    return <a href={link}>Preview</a>;\r\n                  })}\r\n                <form onSubmit={this.onFormSubmit}>\r\n                  {formData &&\r\n                    formData.camundaFormFields.map((field) => {\r\n                      return (\r\n                        <React.Fragment>\r\n                          {field.type === \"long\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"numeric\"\r\n                                min={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"min\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"min\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                max={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"max\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"max\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId === \"genres\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                multiple={true}\r\n                                id={field.formId}\r\n                                name={field.label}\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {field.defaultValue.split(\",\").map((val) => {\r\n                                  return (\r\n                                    <option key={val} value={val}>\r\n                                      {val}\r\n                                    </option>\r\n                                  );\r\n                                })}\r\n                              </select>\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId === \"password\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"password\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId !== \"password\" &&\r\n                          field.formId !== \"email\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"text\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"string\" &&\r\n                          field.formId !== \"genres\" &&\r\n                          field.formId !== \"password\" &&\r\n                          field.formId === \"email\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.formId}\r\n                                type=\"email\"\r\n                                minLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"minlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"minlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                maxLength={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"maxlength\"\r\n                                  )\r\n                                    ? field.validators[\r\n                                        field.validators.findIndex(\r\n                                          (z) => z.validatorName === \"maxlength\"\r\n                                        )\r\n                                      ].validatorConfig\r\n                                    : null\r\n                                }\r\n                                readOnly={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"readonly\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </div>\r\n                          ) : null}\r\n                          {field.type === \"enum\" ? (\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor={field.formId}>\r\n                                {\" \"}\r\n                                {field.label}\r\n                              </label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                id={field.formId}\r\n                                name={field.label}\r\n                                required={\r\n                                  field.validators.find(\r\n                                    (z) => z.validatorName === \"required\"\r\n                                  )\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {field.values.map((val) => {\r\n                                  return (\r\n                                    <option key={val.id} value={val.id}>\r\n                                      {val.name}\r\n                                    </option>\r\n                                  );\r\n                                })}\r\n                              </select>\r\n                            </div>\r\n                          ) : null}\r\n                          {/*proveri da li ima greske  */}\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              </>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n  return {\r\n    formData: state.form.formData,\r\n    processInstanceId: state.form.cometeeUsers,\r\n    cometeeUsers: state.form.cometeeUsers,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchFormData: (processInstanceId) =>\r\n      dispatch(fetchFormData(processInstanceId)),\r\n    fetchFormDataCometee: (processInstanceId, taskNameOrId) =>\r\n      dispatch(fetchFormDataCometee(processInstanceId, taskNameOrId)),\r\n    submitCometeeForm: (formListData, taskId, procInstanceId) =>\r\n      dispatch(submitCometeeForm(formListData, taskId, procInstanceId)),\r\n    getCometeeUsers: () => dispatch(getCometeeUsers()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecisionsDetails);\r\n","C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\apis\\cometee.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\token.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\history.js",[],["156","157"],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js",[],"C:\\Users\\Mladjan\\source\\repos\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\App.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\file-upload\\FileUploadMore.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\reducers\\genresReducer.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\FormFields\\FormFields.js",["158","159"],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\apis\\file.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\apis\\payment.js",[],"C:\\Users\\Mladjan\\Desktop\\UPPV2\\UPP\\upp-temp-front\\src\\components\\payment\\Payment.js",["160"],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":2,"column":3,"nodeType":"167","messageId":"168","endLine":2,"endColumn":26},{"ruleId":"165","severity":1,"message":"169","line":105,"column":11,"nodeType":"167","messageId":"168","endLine":105,"endColumn":13},{"ruleId":"165","severity":1,"message":"170","line":138,"column":23,"nodeType":"167","messageId":"168","endLine":138,"endColumn":43},{"ruleId":"165","severity":1,"message":"171","line":2,"column":3,"nodeType":"167","messageId":"168","endLine":2,"endColumn":16},{"ruleId":"165","severity":1,"message":"172","line":3,"column":3,"nodeType":"167","messageId":"168","endLine":3,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":4,"column":3,"nodeType":"167","messageId":"168","endLine":4,"endColumn":26},{"ruleId":"165","severity":1,"message":"173","line":5,"column":3,"nodeType":"167","messageId":"168","endLine":5,"endColumn":24},{"ruleId":"165","severity":1,"message":"174","line":20,"column":8,"nodeType":"167","messageId":"168","endLine":20,"endColumn":17},{"ruleId":"161","replacedBy":"175"},{"ruleId":"163","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":11,"column":6,"nodeType":"179","endLine":11,"endColumn":8,"suggestions":"180"},{"ruleId":"165","severity":1,"message":"181","line":10,"column":10,"nodeType":"167","messageId":"168","endLine":10,"endColumn":17},{"ruleId":"165","severity":1,"message":"169","line":44,"column":11,"nodeType":"167","messageId":"168","endLine":44,"endColumn":13},{"ruleId":"165","severity":1,"message":"170","line":106,"column":23,"nodeType":"167","messageId":"168","endLine":106,"endColumn":43},{"ruleId":"161","replacedBy":"182"},{"ruleId":"163","replacedBy":"183"},{"ruleId":"161","replacedBy":"184"},{"ruleId":"163","replacedBy":"185"},{"ruleId":"165","severity":1,"message":"186","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":14},{"ruleId":"165","severity":1,"message":"187","line":11,"column":7,"nodeType":"167","messageId":"168","endLine":11,"endColumn":15},{"ruleId":"161","replacedBy":"188"},{"ruleId":"163","replacedBy":"189"},{"ruleId":"165","severity":1,"message":"169","line":105,"column":11,"nodeType":"167","messageId":"168","endLine":105,"endColumn":13},{"ruleId":"165","severity":1,"message":"170","line":138,"column":23,"nodeType":"167","messageId":"168","endLine":138,"endColumn":43},{"ruleId":"165","severity":1,"message":"190","line":42,"column":23,"nodeType":"167","messageId":"168","endLine":42,"endColumn":36},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'FETCH_FORM_DATA_SUCCESS' is defined but never used.","Identifier","unusedVar","'l3' is assigned a value but never used.","'registrationResponse' is assigned a value but never used.","'SIGN_UP_ERROR' is defined but never used.","'SIGN_UP_SUCCESS' is defined but never used.","'FETCH_FORM_DATA_ERROR' is defined but never used.","'jwtDecode' is defined but never used.",["191"],["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["193"],"'history' is defined but never used.",["191"],["192"],["191"],["192"],"'Link' is defined but never used.","'formData' is assigned a value but never used.",["191"],["192"],"'paymentStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},"Update the dependencies array to be: [props]",{"range":"196","text":"197"},[364,366],"[props]"]